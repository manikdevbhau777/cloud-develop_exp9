// Import required modules
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWTs
const SECRET_KEY = "mysecretkey";

// 🧑‍💼 Hardcoded sample users with roles
const users = [
  { username: "admin", password: "12345", role: "Admin" },
  { username: "mod", password: "12345", role: "Moderator" },
  { username: "user", password: "12345", role: "User" }
];

// 🟢 Route 1: Login - issues JWT token with role in payload
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  const foundUser = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!foundUser) {
    return res.status(401).json({ error: "Invalid username or password" });
  }

  // Create a token that includes role
  const token = jwt.sign(
    { username: foundUser.username, role: foundUser.role },
    SECRET_KEY,
    { expiresIn: "1h" }
  );

  res.json({
    message: "Login successful!",
    token,
    role: foundUser.role
  });
});

// 🔒 Middleware: Verify JWT and extract user info
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ error: "No token provided" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(403).json({ error: "Invalid or expired token" });
    req.user = decoded;
    next();
  });
}

// 🛡️ Middleware: Check Role Authorization
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!allowedRoles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ error: `Access denied for role: ${req.user.role}` });
    }
    next();
  };
}

// 🟣 Public route (anyone can access)
app.get("/public", (req, res) => {
  res.json({ message: "Welcome to the public API!" });
});

// 🔐 Protected routes with role-based access
app.get("/admin/dashboard", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({ message: `Welcome Admin ${req.user.username}!` });
});

app.get("/moderator/manage", verifyToken, authorizeRoles("Admin", "Moderator"), (req, res) => {
  res.json({ message: `Moderator access granted to ${req.user.username}.` });
});

app.get("/user/profile", verifyToken, authorizeRoles("Admin", "Moderator", "User"), (req, res) => {
  res.json({ message: `Hello ${req.user.username}, this is your profile page.` });
});

// 🚀 Start the server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
