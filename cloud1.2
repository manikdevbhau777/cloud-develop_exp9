// Import required modules
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWTs (in real apps, keep it in .env)
const SECRET_KEY = "mysecretkey";

// 🧑‍💻 Hardcoded sample user
const user = {
  username: "admin",
  password: "12345"
};

// 🟢 Route 1: Login - issues JWT token if credentials are valid
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  if (username === user.username && password === user.password) {
    // Create token
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: "1h" });
    res.json({ message: "Login successful!", token });
  } else {
    res.status(401).json({ error: "Invalid credentials" });
  }
});

// 🔒 Middleware: Verify JWT Token
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];

  if (!authHeader) {
    return res.status(401).json({ error: "No token provided" });
  }

  const token = authHeader.split(" ")[1]; // Format: "Bearer <token>"

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      return res.status(403).json({ error: "Invalid or expired token" });
    }

    req.user = decoded; // attach decoded user info
    next();
  });
}

// 🟣 Route 2: Public route (accessible by anyone)
app.get("/public", (req, res) => {
  res.json({ message: "Welcome to the public API route!" });
});

// 🔐 Route 3: Protected route (requires JWT)
app.get("/protected", verifyToken, (req, res) => {
  res.json({
    message: `Hello, ${req.user.username}! You have accessed a protected route.`,
  });
});

// 🚀 Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
